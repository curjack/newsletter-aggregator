services:
  - type: web
    name: newsletter-aggregator
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: |
      # Wait for database with improved error handling
      python -c "
      import time
      import os
      import sys
      from sqlalchemy import create_engine
      from sqlalchemy.exc import OperationalError
      
      def wait_for_db(url, max_retries=5, retry_delay=5):
          print(f'Checking database connection (max {max_retries} attempts)...')
          for attempt in range(max_retries):
              try:
                  print(f'Attempt {attempt + 1} of {max_retries}...')
                  engine = create_engine(url)
                  with engine.connect() as conn:
                      conn.execute('SELECT 1')
                  print('Database connection successful!')
                  return True
              except Exception as e:
                  print(f'Attempt {attempt + 1} failed: {str(e)}')
                  if attempt < max_retries - 1:
                      print(f'Retrying in {retry_delay} seconds...')
                      time.sleep(retry_delay)
                  else:
                      print('All database connection attempts failed')
                      return False
      
      # Format database URL
      db_url = os.environ.get('DATABASE_URL', '')
      if db_url.startswith('postgres://'):
          db_url = db_url.replace('postgres://', 'postgresql://', 1)
      
      if not wait_for_db(db_url):
          sys.exit(1)
      " && \
      # Initialize database with proper migrations
      python -c "
      from flask import Flask
      from flask_sqlalchemy import SQLAlchemy
      from flask_migrate import Migrate, upgrade
      import os
      import sys
      
      try:
          print('Initializing Flask application...')
          app = Flask(__name__)
          app.config['SQLALCHEMY_DATABASE_URI'] = os.environ.get('DATABASE_URL').replace('postgres://', 'postgresql://')
          db = SQLAlchemy(app)
          migrate = Migrate(app, db)
          
          print('Running database migrations...')
          with app.app_context():
              upgrade()
          print('Database migrations completed successfully!')
      
      except Exception as e:
          print(f'Error during database initialization: {str(e)}')
          sys.exit(1)
      " && \
      # Start Gunicorn with optimized settings
      gunicorn app:app \
        --workers=4 \
        --threads=2 \
        --worker-class=gthread \
        --worker-tmp-dir=/dev/shm \
        --timeout=120 \
        --keep-alive=5 \
        --max-requests=1000 \
        --max-requests-jitter=50 \
        --log-level=info \
        --access-logfile=- \
        --error-logfile=- \
        --capture-output
    envVars:
      - key: PYTHON_VERSION
        value: 3.12.0
      - key: FLASK_ENV
        value: production
      - key: FLASK_APP
        value: app.py
      - key: DATABASE_URL
        fromDatabase:
          name: newsletter-db
          property: connectionString
      - key: SECRET_KEY
        generateValue: true
      - key: JWT_SECRET_KEY
        generateValue: true
      - key: PASSWORD_SALT
        generateValue: true
      - key: MAILGUN_DOMAIN
        sync: false
      - key: MAILGUN_API_KEY
        sync: false
      - key: MAILGUN_WEBHOOK_SIGNING_KEY
        sync: false
      - key: MAILGUN_BASE_URL
        value: https://api.mailgun.net/v3
      - key: NEWSLETTER_RECEIVING_EMAIL
        sync: false
      - key: DIGEST_FROM_EMAIL
        sync: false
      - key: DIGEST_FROM_NAME
        value: Newsletter Digest
    healthCheckPath: /health
    numInstances: 1
    autoscaling:
      min: 1
      max: 1

databases:
  - name: newsletter-db
    databaseName: newsletter
    plan: free
    ipAllowList: [] # allow all 